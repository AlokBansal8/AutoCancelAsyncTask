buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
  }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

def versionNumber = 0
def versionMajor = 0
def versionMinor = 2
def versionPatch = 0
def vName = "${versionMajor}.${versionMinor}.${versionPatch}"

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  compileOptions {
    sourceCompatibility rootProject.ext.sourceCompatibility
    targetCompatibility rootProject.ext.sourceCompatibility
  }

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion

    versionCode versionNumber
    versionName vName
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  def support_library_version = "23.3.0"

  testCompile 'junit:junit:4.12'

  compile "com.android.support:support-annotations:${support_library_version}"
  compile "com.android.support:appcompat-v7:${support_library_version}"
}

ext {
  bintrayRepo = 'maven'
  bintrayName = 'AutoCancelAsyncTask'

  publishedGroupId = 'com.github.alokbansal8.autocancelasynctask'
  libraryName = 'AutoCancelAsyncTask'
  artifact = 'lib'

  libraryDescription = 'AsyncTask that is linked to onStop lifecycle event of Android Activity'

  siteUrl = 'https://github.com/AlokBansal8/AutoCancelAsyncTask'
  gitUrl = 'https://github.com/AlokBansal8/AutoCancelAsyncTask.git'

  developerId = 'alokbansal8'
  developerName = 'Alok Bansal'
  developerEmail = 'alokagrawal8@gmail.com'

  licenseName = 'The Apache Software License, Version 2.0'
  licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
  allLicenses = ["Apache-2.0"]
}

group = publishedGroupId

install {
  repositories.mavenInstaller.pom.project {
    packaging 'aar'
    groupId publishedGroupId
    artifactId artifact

    name libraryName
    description libraryDescription
    url siteUrl

    licenses {
      license {
        name licenseName
        url licenseUrl
      }
    }

    scm {
      connection gitUrl
      developerConnection gitUrl
      url siteUrl
    }

    developers {
      developer {
        id developerId
        name developerName
        email developerEmail
      }
    }
  }
}

version = vName

if (project.hasProperty("android")) {
  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
  }

  task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }
} else { // Java libraries
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
  user = properties.getProperty("bintray.user")
  key = properties.getProperty("bintray.apikey")

  configurations = ['archives']

  publish = true

  pkg {
    repo = bintrayRepo
    name = bintrayName
    desc = libraryDescription
    websiteUrl = siteUrl
    vcsUrl = gitUrl
    licenses = allLicenses

    version {
      desc = libraryDescription
    }
  }
}
